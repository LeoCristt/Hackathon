import pika
import json
import time

print("üß™ Manual AI Response Tester")
print("=" * 50)
print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —ç–º—É–ª–∏—Ä—É–µ—Ç AI service")
print("–í—ã –±—É–¥–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ RabbitMQ")
print("=" * 50)

def connect_rabbitmq():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ"""
    try:
        connection = pika.BlockingConnection(
            pika.ConnectionParameters(host='localhost', port=5672)
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RabbitMQ (localhost:5672)")
        return connection
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RabbitMQ –∑–∞–ø—É—â–µ–Ω: docker-compose ps")
        exit(1)

def send_ai_response(channel, chat_id, answer, bot_username, is_manager=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å ai_responses"""
    response = {
        'chatId': chat_id,
        'answer': answer,
        'botUsername': bot_username,
        'isManager': is_manager
    }

    channel.basic_publish(
        exchange='',
        routing_key='ai_responses',
        body=json.dumps(response),
        properties=pika.BasicProperties(
            delivery_mode=2,  # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        )
    )

    print(f"\n‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å 'ai_responses':")
    print(f"   Chat ID: {chat_id}")
    print(f"   Answer: {answer}")
    print(f"   Bot Username: {bot_username}")
    print(f"   isManager: {is_manager}")

def listen_requests(channel):
    """–°–ª—É—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å ai_requests –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö"""

    def callback(ch, method, properties, body):
        try:
            request = json.loads(body)
            print("\n" + "=" * 50)
            print("üì® –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –û–¢ CHAT SERVICE:")
            print("=" * 50)
            print(f"Chat ID: {request.get('chatId')}")
            print(f"Message: {request.get('message')}")
            print(f"AI Model: {request.get('aiId', 'N/A')}")
            print(f"History Length: {len(request.get('messageHistory', []))}")
            print("=" * 50)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
            ch.basic_ack(delivery_tag=method.delivery_tag)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            ch.basic_nack(delivery_tag=method.delivery_tag)

    channel.basic_consume(
        queue='ai_requests',
        on_message_callback=callback,
        auto_ack=False
    )

    print("\nüéß –°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å 'ai_requests'...")
    print("–û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n")

def manual_mode(channel):
    """–†–µ–∂–∏–º —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\n" + "=" * 50)
    print("üìù –†–ï–ñ–ò–ú –†–£–ß–ù–û–ô –û–¢–ü–†–ê–í–ö–ò")
    print("=" * 50)
    print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
    print("(–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –æ—Ç–º–µ–Ω—ã)\n")

    chat_id = input("Chat ID: ").strip()
    if not chat_id:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    answer = input("–û—Ç–≤–µ—Ç AI: ").strip()
    if not answer:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return

    bot_username = input("Bot Username [AI-–ø–æ–º–æ—â–Ω–∏–∫]: ").strip()
    if not bot_username:
        bot_username = "AI-–ø–æ–º–æ—â–Ω–∏–∫"

    is_manager_input = input("–¢—Ä–µ–±—É–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä? (y/n) [n]: ").strip().lower()
    is_manager = is_manager_input == 'y'

    send_ai_response(channel, chat_id, answer, bot_username, is_manager)

if __name__ == '__main__':
    connection = connect_rabbitmq()
    channel = connection.channel()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
    channel.queue_declare(queue='ai_requests', durable=True)
    channel.queue_declare(queue='ai_responses', durable=True)
    print("‚úÖ –û—á–µ—Ä–µ–¥–∏ 'ai_requests' –∏ 'ai_responses' –≥–æ—Ç–æ–≤—ã\n")

    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –°–ª—É—à–∞—Ç—å ai_requests (–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã)")
    print("2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é (—ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å AI –æ—Ç–≤–µ—Ç)")
    print("3. –û–±–∞ —Ä–µ–∂–∏–º–∞ (—Å–ª—É—à–∞—Ç—å + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å)")

    mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2/3): ").strip()

    if mode == '1':
        # –¢–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ–º
        listen_requests(channel)
        try:
            channel.start_consuming()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    elif mode == '2':
        # –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞
        while True:
            manual_mode(channel)
            again = input("\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç? (y/n): ").strip().lower()
            if again != 'y':
                break

    elif mode == '3':
        # –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
        import threading

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def consume():
            listen_requests(channel)
            channel.start_consuming()

        consumer_thread = threading.Thread(target=consume, daemon=True)
        consumer_thread.start()

        time.sleep(1)

        print("\n" + "=" * 50)
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  'send' - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é")
        print("  'quit' - –≤—ã–π—Ç–∏")
        print("=" * 50 + "\n")

        while True:
            cmd = input("–ö–æ–º–∞–Ω–¥–∞: ").strip().lower()
            if cmd == 'send':
                manual_mode(channel)
            elif cmd == 'quit':
                break
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    connection.close()
    print("\nüëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç RabbitMQ")
