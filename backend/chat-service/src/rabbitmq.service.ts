import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import * as amqp from 'amqp-connection-manager';
import { ChannelWrapper } from 'amqp-connection-manager';

interface AIRequest {
  chatId: string;
  message: string;
  messageHistory: any[];
  aiId?: string;
}

interface AIResponse {
  chatId: string;
  response: string;
}

@Injectable()
export class RabbitMQService implements OnModuleInit, OnModuleDestroy {
  private connection: amqp.AmqpConnectionManager;
  private channelWrapper: ChannelWrapper;

  // –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –ë–î
  private readonly DB_QUEUE = 'db_messages';

  // –û—á–µ—Ä–µ–¥–∏ –¥–ª—è AI-—Å–µ—Ä–≤–∏—Å–∞
  private readonly AI_REQUEST_QUEUE = 'ai_requests';
  private readonly AI_RESPONSE_QUEUE = 'ai_responses';

  private readonly RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqp://guest:guest@rabbitmq:5672';
  private aiResponseCallback: ((response: AIResponse) => void) | null = null;

  async onModuleInit() {
    await this.connect();
  }

  async onModuleDestroy() {
    await this.disconnect();
  }

  private async connect() {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ:', this.RABBITMQ_URL);

    this.connection = amqp.connect([this.RABBITMQ_URL]);

    this.connection.on('connect', () => {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ RabbitMQ');
    });

    this.connection.on('disconnect', (err: any) => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç RabbitMQ:', err?.message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    });

    this.channelWrapper = this.connection.createChannel({
      json: true,
      setup: async (channel: amqp.Channel) => {
        // –û—á–µ—Ä–µ–¥–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ rabbitmq-definitions.json –≤ docker-compose
        // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –Ω–∞–ª–∏—á–∏–µ (assertQueue —Å passive:true —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç)
        await channel.checkQueue(this.DB_QUEUE);
        console.log(`‚úÖ –û—á–µ—Ä–µ–¥—å –¥–ª—è –ë–î "${this.DB_QUEUE}" –Ω–∞–π–¥–µ–Ω–∞`);

        await channel.checkQueue(this.AI_REQUEST_QUEUE);
        await channel.checkQueue(this.AI_RESPONSE_QUEUE);
        console.log(`‚úÖ –û—á–µ—Ä–µ–¥–∏ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–π–¥–µ–Ω—ã`);

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç AI –∞–≥–µ–Ω—Ç–∞
        await channel.consume(this.AI_RESPONSE_QUEUE, (msg) => {
          if (msg !== null) {
            const response: AIResponse = JSON.parse(msg.content.toString());
            console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI –∞–≥–µ–Ω—Ç–∞:', response);

            if (this.aiResponseCallback) {
              this.aiResponseCallback(response);
            }

            channel.ack(msg);
          }
        });

        console.log(`‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –æ—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI`);
      },
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async sendMessageToDB(message: any): Promise<boolean> {
    try {
      await this.channelWrapper.sendToQueue(
        this.DB_QUEUE,
        message,
        {
          persistent: true,
          contentType: 'application/json'
        } as any
      );
      console.log('üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ë–î —Å–µ—Ä–≤–∏—Å:', message);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI —Å–µ—Ä–≤–∏—Å—É
   * @param chatId - ID —á–∞—Ç–∞
   * @param message - –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param messageHistory - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis
   * @param aiId - ID AI –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async sendToAI(request: AIRequest): Promise<boolean> {
    try {
      await this.channelWrapper.sendToQueue(
        this.AI_REQUEST_QUEUE,
        request,
        {
          persistent: true,
          contentType: 'application/json'
        } as any
      );
      console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω AI —Å–µ—Ä–≤–∏—Å—É:', {
        chatId: request.chatId,
        message: request.message,
        historyLength: request.messageHistory.length,
        aiId: request.aiId || 'default'
      });
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ AI:', error);
      return false;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI
   */
  setAIResponseCallback(callback: (response: AIResponse) => void) {
    this.aiResponseCallback = callback;
  }

  private async disconnect() {
    if (this.channelWrapper) {
      await this.channelWrapper.close();
    }
    if (this.connection) {
      await this.connection.close();
    }
    console.log('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç RabbitMQ');
  }
}
