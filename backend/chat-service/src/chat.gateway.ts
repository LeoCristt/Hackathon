import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  MessageBody,
  ConnectedSocket,
  OnGatewayConnection,
  OnGatewayDisconnect,
  OnGatewayInit,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { RabbitMQService } from './rabbitmq.service';
import { RedisService } from './redis.service';

interface ChatMessage {
  messageId: string;
  sequence: number;
  username: string;
  message: string;
  timestamp: string;
  chatId: string;
}

interface UserInfo {
  chatId: string;
  username: string;
}

@WebSocketGateway({
  cors: {
    origin: '*',
  },
})
export class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit {
  @WebSocketServer()
  server: Server;

  private connectedUsers = new Map<string, UserInfo>();
  private chatRooms = new Map<string, Set<string>>(); // chatId -> Set<socketId>

  constructor(
    private readonly rabbitMQService: RabbitMQService,
    private readonly redisService: RedisService,
  ) {}

  afterInit() {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã –æ—Ç AI –∞–≥–µ–Ω—Ç–∞
    this.rabbitMQService.setAIResponseCallback((response) => {
      this.handleAIResponse(response);
    });
    console.log('‚úÖ ChatGateway –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ AI –æ—Ç–≤–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }

  private async handleAIResponse(response: { chatId: string; response: string }) {
    const { chatId, response: aiMessage } = response;

    console.log('\nüéØ ‚ïê‚ïê‚ïê –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –û–¢ AI –°–ï–†–í–ò–°–ê ‚ïê‚ïê‚ïê');
    console.log('–û—á–µ—Ä–µ–¥—å: ai_responses');
    console.log('Chat ID:', chatId);
    console.log('–û—Ç–≤–µ—Ç AI:', aiMessage);
    console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(response, null, 2));

    const messageId = `${chatId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π sequence number –∏–∑ Redis (–∞—Ç–æ–º–∞—Ä–Ω–æ)
    const sequence = await this.redisService.getNextSequence(chatId);

    const chatMessage: ChatMessage = {
      messageId,
      sequence,
      username: 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç',
      message: aiMessage,
      timestamp: new Date().toISOString(),
      chatId,
    };

    console.log('\nüìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AI:');
    console.log('  Message ID:', messageId);
    console.log('  Sequence:', sequence);
    console.log('  Username:', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç');

    // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI –≤ Redis
    await this.redisService.cacheMessage(chatId, chatMessage);
    console.log('‚úÖ –û—Ç–≤–µ—Ç AI –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –≤ Redis');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –ë–î —á–µ—Ä–µ–∑ RabbitMQ
    console.log('\nüì¶ ‚ïê‚ïê‚ïê –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê AI –í –ë–î ‚ïê‚ïê‚ïê');
    console.log('–û—á–µ—Ä–µ–¥—å: db_messages');
    console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(chatMessage, null, 2));
    await this.rabbitMQService.sendMessageToDB(chatMessage);
    console.log('‚úÖ –û—Ç–≤–µ—Ç AI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ë–î');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
    const chatSockets = this.chatRooms.get(chatId);
    if (chatSockets) {
      console.log('\nüåê –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ AI —á–µ—Ä–µ–∑ WebSocket');
      console.log('  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:', chatSockets.size);
      chatSockets.forEach(socketId => {
        this.server.to(socketId).emit('message', chatMessage);
      });
      console.log('‚úÖ –û—Ç–≤–µ—Ç AI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞\n');
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —á–∞—Ç–µ', chatId, '\n');
    }
  }

  handleConnection(client: Socket) {
    console.log(`üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${client.id}`);
  }

  handleDisconnect(client: Socket) {
    const userInfo = this.connectedUsers.get(client.id);

    if (userInfo) {
      const { username, chatId } = userInfo;

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞
      if (chatId && this.chatRooms.has(chatId)) {
        this.chatRooms.get(chatId)!.delete(client.id);

        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
        if (this.chatRooms.get(chatId)!.size === 0) {
          this.chatRooms.delete(chatId);
        }
      }

      this.connectedUsers.delete(client.id);
      console.log(`üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${client.id} (${username})`);
    }
  }

  @SubscribeMessage('join')
  async handleJoin(
    @MessageBody() data: { username?: string; chatId?: string },
    @ConnectedSocket() client: Socket,
  ) {
    const chatId = data.chatId || 'default';
    // –ï—Å–ª–∏ username –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∞–Ω–æ–Ω–∏–º)
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω - —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–ª–∏ –¥—Ä—É–≥–∞—è —Ä–æ–ª—å
    const username = data.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    const userInfo: UserInfo = {
      username,
      chatId,
    };

    this.connectedUsers.set(client.id, userInfo);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
    if (!this.chatRooms.has(chatId)) {
      this.chatRooms.set(chatId, new Set());
    }
    this.chatRooms.get(chatId)!.add(client.id);

    console.log(`üë§ ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId} (${client.id})`);

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis
    const messageHistory = await this.redisService.getMessageHistory(chatId);

    console.log(`üìö –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (${messageHistory.length} —à—Ç.) –¥–ª—è ${username}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    if (messageHistory.length > 0) {
      client.emit('history', messageHistory);
    }

    return {
      status: 'ok',
      message: '–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É',
      chatId,
      username,
      historyCount: messageHistory.length,
    };
  }

  @SubscribeMessage('message')
  async handleMessage(
    @MessageBody() data: { message: string; aiId?: string },
    @ConnectedSocket() client: Socket,
  ) {
    const userInfo = this.connectedUsers.get(client.id);
    if (!userInfo) {
      return { status: 'error', message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    const { username, chatId } = userInfo;
    const timestamp = new Date().toISOString();
    const messageId = `${chatId}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π sequence number –∏–∑ Redis
    const sequence = await this.redisService.getNextSequence(chatId);

    const chatMessage: ChatMessage = {
      messageId,
      sequence,
      username,
      message: data.message,
      timestamp,
      chatId,
    };

    console.log(`üí¨ [${messageId}] #${sequence} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${username} –≤ —á–∞—Ç–µ ${chatId}: ${data.message}`);

    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
    const chatSockets = this.chatRooms.get(chatId);
    if (chatSockets) {
      chatSockets.forEach(socketId => {
        this.server.to(socketId).emit('message', chatMessage);
      });
    }

    // 2. –ö—ç—à–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis
    await this.redisService.cacheMessage(chatId, chatMessage);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
    console.log('\nüì¶ ‚ïê‚ïê‚ïê –û–¢–ü–†–ê–í–ö–ê –í –ë–î –°–ï–†–í–ò–° ‚ïê‚ïê‚ïê');
    console.log('–û—á–µ—Ä–µ–¥—å: db_messages');
    console.log('–î–∞–Ω–Ω—ã–µ:', JSON.stringify(chatMessage, null, 2));
    await this.rabbitMQService.sendMessageToDB(chatMessage);
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ë–î\n');

    // 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis
    const messageHistory = await this.redisService.getMessageHistory(chatId);

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ AI-—Å–µ—Ä–≤–∏—Å: —Å–æ–æ–±—â–µ–Ω–∏–µ + –∏—Å—Ç–æ—Ä–∏—è + chatId + aiId
    const aiRequest = {
      chatId,
      message: data.message,
      messageHistory,
      aiId: data.aiId,
    };

    console.log('\nü§ñ ‚ïê‚ïê‚ïê –û–¢–ü–†–ê–í–ö–ê –í AI –°–ï–†–í–ò–° ‚ïê‚ïê‚ïê');
    console.log('–û—á–µ—Ä–µ–¥—å: ai_requests');
    console.log('Chat ID:', chatId);
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.message);
    console.log('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', messageHistory.length, '—à—Ç.');
    console.log('AI Model ID:', data.aiId || 'default');
    console.log('–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(aiRequest, null, 2));
    await this.rabbitMQService.sendToAI(aiRequest);
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ AI —Å–µ—Ä–≤–∏—Å\n');

    return { status: 'ok', message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
  }

}
