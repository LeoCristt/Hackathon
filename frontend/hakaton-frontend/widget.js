(function() {
    let url = "http://192.168.88.78"
    let socket = null;
    let chatId = null;

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π chatId –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function getChatId() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chatId –∏–∑ localStorage
        let storedChatId = localStorage.getItem('widget_chat_id');

        if (!storedChatId) {
            // –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            storedChatId = 'chat-' + Date.now() + '-' + Math.random().toString(36).substring(2, 9);
            localStorage.setItem('widget_chat_id', storedChatId);
            console.log('üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π chatId:', storedChatId);
        } else {
            console.log('‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω chatId –∏–∑ localStorage:', storedChatId);
        }

        return storedChatId;
    }

    function insertWidget() {
        // –ó–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ Kong Gateway (–ø–æ—Ä—Ç 8000)
        // Kong –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ–º–µ–Ω –≤ –ë–î –∏ –¥–æ–±–∞–≤–∏—Ç AI –º–æ–¥–µ–ª—å –≤ headers
        Promise.all([
            fetch(`${url}:8000/widget/html`).then(r => {
                if (!r.ok) {
                    throw new Error('Access denied: Domain not authorized');
                }
                return r.json();
            }),
            fetch(`${url}:8000/widget/css`).then(r => r.json())
        ]).then(([htmlData, cssData]) => {
            // –°–æ–∑–¥–∞–µ–º Shadow DOM
            const container = document.createElement('div');
            const shadow = container.attachShadow({mode: 'open'});

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ Shadow DOM
            const style = document.createElement('style');
            style.textContent = cssData.css;
            shadow.appendChild(style);

            // –î–æ–±–∞–≤–ª—è–µ–º HTML –≤ Shadow DOM
            const content = document.createElement('div');
            content.innerHTML = htmlData.html;
            shadow.appendChild(content);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            document.body.appendChild(container);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–∞—Ç–∞
            initializeChat(shadow);
        });
    }

    function initializeChat(shadow) {
        const header = shadow.querySelector('.widgetHeader');
        const chatGroup = shadow.querySelector('.widgetGroupChatInput');
        const messageInput = shadow.querySelector('#messageInput');
        const sendButton = shadow.querySelector('#sendButton');
        const chatDiv = shadow.querySelector('#widgetChat');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        header.addEventListener('click', () => {
            chatGroup.classList.toggle('collapsed');
            header.classList.toggle('collapsed');

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
            if (!chatGroup.classList.contains('collapsed') && !socket) {
                connectToChat(shadow);
            }
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message && socket) {
                socket.emit('message', { message });
                messageInput.value = '';
            }
        }

        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    }

    function connectToChat(shadow) {
        // –ü–æ–ª—É—á–∞–µ–º chatId (–∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π)
        chatId = getChatId();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º Socket.IO
        const script = document.createElement('script');
        script.src = 'https://cdn.socket.io/4.5.4/socket.io.min.js';
        script.onload = () => {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ Kong
            // Socket.IO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—É—Ç—å /socket.io/
            socket = io(`${url}:8000`);

            socket.on('connect', () => {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —á–∞—Ç—É');
                console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chatId:', chatId);

                // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
                socket.emit('join', { chatId });
            });

            socket.on('disconnect', () => {
                console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —á–∞—Ç–∞');
            });

            socket.on('message', (data) => {
                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
                addMessage(shadow, data);
            });

            socket.on('history', (messages) => {
                console.log('üìö –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è:', messages.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
                const chatDiv = shadow.querySelector('#widgetChat');
                chatDiv.innerHTML = '';

                messages.forEach(msg => {
                    addMessage(shadow, msg, false);
                });

                chatDiv.scrollTop = chatDiv.scrollHeight;
            });

            socket.on('system', (data) => {
                console.log('üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            });
        };

        document.head.appendChild(script);
    }

    function addMessage(shadow, data, autoScroll = true) {
        const chatDiv = shadow.querySelector('#widgetChat');
        const messageDiv = document.createElement('div');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        // AI —Å–æ–æ–±—â–µ–Ω–∏—è - –ª—é–±–æ–µ username, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å 'AI' –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ '–ø–æ–º–æ—â–Ω–∏–∫'
        const isAI = data.username.startsWith('AI') || data.username.includes('–ø–æ–º–æ—â–Ω–∏–∫');
        const isManager = data.username && data.username.includes('–û–ø–µ—Ä–∞—Ç–æ—Ä');
        const isUser = data.username === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' || (!isAI && !isManager);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let messageClass = 'chatMessage';
        if (isAI) {
            messageClass += ' ai';
        } else if (isManager) {
            messageClass += ' manager';
        } else {
            messageClass += ' user';
        }

        messageDiv.className = messageClass;

        const time = new Date(data.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        messageDiv.innerHTML = `
            <div class="messageUsername">${escapeHtml(data.username)}</div>
            <div class="messageText">${escapeHtml(data.message)}</div>
            <div class="messageTime">${time}</div>
        `;

        chatDiv.appendChild(messageDiv);

        if (autoScroll) {
            chatDiv.scrollTop = chatDiv.scrollHeight;
        }
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', insertWidget);
    } else {
        insertWidget();
    }
})();