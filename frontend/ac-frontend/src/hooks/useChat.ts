import { useEffect, useRef, useState } from 'react';
import { io, Socket } from 'socket.io-client';

export interface ChatMessage {
    sequence: number;
    username: string;
    message: string;
    timestamp: string;
    chatId: string;
}

export interface Chat {
    id: string;
    title: string;
    createdAt: string;
    updatedAt: string;
    messageCount: number;
}

export function useChat(chatId: string | null) {
    const [socket, setSocket] = useState<Socket | null>(null);
    const [messages, setMessages] = useState<ChatMessage[]>([]);
    const [isConnected, setIsConnected] = useState(false);
    const socketRef = useRef<Socket | null>(null);

    useEffect(() => {
        // –ï—Å–ª–∏ chatId –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        if (!chatId) {
            return;
        }

        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è —á–∞—Ç–∞:', chatId);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
        const token = localStorage.getItem('access_token');

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        const newSocket = io('http://172.29.67.31:8000', {
            path: '/socket.io',
            transports: ['polling', 'websocket'],
            reconnection: true,
            reconnectionDelay: 1000,
            reconnectionAttempts: 5,
            withCredentials: true,
            forceNew: true,
            extraHeaders: token ? {
                'Authorization': `Bearer ${token}`
            } : undefined,
        });

        socketRef.current = newSocket;
        setSocket(newSocket);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        newSocket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket');
            setIsConnected(true);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ join –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (username –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
            newSocket.emit('join', {
                chatId: chatId,
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        newSocket.on('disconnect', () => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç WebSocket');
            setIsConnected(false);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        newSocket.on('message', (data: ChatMessage) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
            setMessages((prev) => [...prev, data]);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        newSocket.on('history', (history: ChatMessage[]) => {
            console.log('üìö –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è:', history.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
            setMessages(history);
        });

        // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–º–µ–Ω–µ chatId
        return () => {
            console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket');
            newSocket.disconnect();
            socketRef.current = null;
        };
    }, [chatId]);

    const sendMessage = (message: string) => {
        if (socket && socket.connected) {
            socket.emit('message', { message });
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
        } else {
            console.error('‚ùå Socket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
    };

    return {
        messages,
        isConnected,
        sendMessage,
    };
}
